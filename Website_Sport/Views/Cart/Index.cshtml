
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/MasterLayout.cshtml";
}
<link rel="stylesheet" href="../MasterLayout/style.css">
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap"
      rel="stylesheet">
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
<style>
    .header {
        background: initial !important; 
    }
</style>
<div class="small-container cart-page">
    <table>
        <thead>
            <tr>
                <th>Product</th> 
                <th>Color</th> 
                <th>Size</th>
                <th>Quantity</th>
                <th>Subtotal</th>
            </tr>
        </thead>
        <tbody>
            <!-- Product rows will be added here dynamically -->
        </tbody>
    </table>

    <div class="total-price">
        <table>
            <tr>
                <td>Subtotal</td>
                <td>0</td>
            </tr>
        </table>
    </div>
    <div class="pay">
        <a style=" width: 180px;
    height: 40px;
    background-color: #ff523b;
    color: #fff; border: none; cursor:pointer" href="/payment">
            Thanh toán
        </a>
    </div>
</div>

<script>
    // Lấy dữ liệu từ localStorage
    const cartItems = JSON.parse(localStorage.getItem('cart')) || [];

    // Lặp qua mỗi sản phẩm trong giỏ hàng
    cartItems.forEach(item => {
        // Tạo một hàng mới trong bảng
        const row = document.createElement('tr');

        // Tạo cột cho thông tin sản phẩm
        const productCell = document.createElement('td');
        const productInfo = document.createElement('div');
        productInfo.classList.add('cart-info');
        productInfo.innerHTML = `
                <img src="${item.Image}">
            <div>
                    <p>${item.Type}</p>
                    <small>Price: $${item.Price}</small>
                <br>
                      <a class="remove-btn" style="cursor:pointer">Remove</a>
            </div>
        `;
        productCell.appendChild(productInfo);
        row.appendChild(productCell);
        // Tạo cột Color
        const Color = document.createElement('td');
        Color.textContent = `${item.Color}`;
        row.appendChild(Color);
        // Tạo cột Size
        const Size = document.createElement('td');
        Size.textContent = `${item.Size}`;
        row.appendChild(Size);
        // Tạo cột cho input số lượng
        const quantityCell = document.createElement('td');
        quantityCell.textContent = `${item.Quantity}`;
        row.appendChild(quantityCell);

        // Tạo cột cho subtotal
        const subtotalCell = document.createElement('td');
        const subtotal = `${item.Price}` * `${item.Quantity}`;
        console.log("Tổng giá: ", subtotal)
        subtotalCell.textContent = `${subtotal}`;
        row.appendChild(subtotalCell);   
     

        // Thêm hàng vào bảng
        document.querySelector('.cart-page table tbody').appendChild(row);
    });

    // // Tính tổng số tiền
     const subtotal = cartItems.reduce((acc, item) => acc + (item.Price * item.Quantity), 0);
    // // Hiển thị tổng số tiền
    document.querySelector('.total-price table tr:nth-child(1) td:nth-child(2)').textContent = `${subtotal}`;
    console.log("Tổngg:", `$${subtotal}`)
    function removeItemsByAttributes(type, color, size) {
        let cartItems = JSON.parse(localStorage.getItem('cart')) || [];
        cartItems = cartItems.filter(item => {
            return item.Type !== type || item.Color !== color || item.Size !== size;
        });
        localStorage.setItem('cart', JSON.stringify(cartItems));
        updateCartDisplay();
        updateTotalPrice();
    }

    function updateTotalPrice() {
        const cartItems = JSON.parse(localStorage.getItem('cart')) || [];
        const subtotal = cartItems.reduce((acc, item) => acc + (item.Price * item.Quantity), 0);
        document.querySelector('.total-price table tr:nth-child(1) td:nth-child(2)').textContent = `${subtotal}`;
    }
    function updateCartDisplay() {
        const cartTableBody = document.querySelector('.cart-page table tbody');
        cartTableBody.innerHTML = '';

        const cartItems = JSON.parse(localStorage.getItem('cart')) || [];
        cartItems.forEach(item => {
            const row = document.createElement('tr');

            const productCell = document.createElement('td');
            const productInfo = document.createElement('div');
            productInfo.classList.add('cart-info');
            productInfo.innerHTML = `
                    <img src="${item.Image}">
                <div>
                        <p>${item.Type}</p>
                        <small>Price: $${item.Price}</small>
                    <br>
                      <a class="remove-btn" style="cursor-pointer">Remove</a>
                </div>
            `;
            productCell.appendChild(productInfo);
            row.appendChild(productCell);
            // Tạo cột Color
            const Color = document.createElement('td');
            Color.textContent = `${item.Color}`;
            row.appendChild(Color);
            // Tạo cột Size
            const Size = document.createElement('td');
            Size.textContent = `${item.Size}`;
            row.appendChild(Size);
            // Tạo cột cho input số lượng
            const quantityCell = document.createElement('td');
            quantityCell.textContent = `${item.Quantity}`;
            row.appendChild(quantityCell);

            // Tạo cột cho subtotal
            const subtotalCell = document.createElement('td');
            const subtotal = `${item.Price}` * `${item.Quantity}`;
            console.log("Tổng giá: ", subtotal)
            subtotalCell.textContent = `${subtotal}`;
            row.appendChild(subtotalCell);

            // Thêm hàng vào bảng
            cartTableBody.appendChild(row);

            // Sự kiện click vào nút "Remove"
            const removeBtn = productInfo.querySelector('.remove-btn');
            removeBtn.addEventListener('click', () => {
                removeItemsByAttributes(item.Type, item.Color, item.Size);
                location.reload();
            });
        });
    }

    // Gọi hàm cập nhật giao diện khi trang được tải
    updateCartDisplay();
</script>