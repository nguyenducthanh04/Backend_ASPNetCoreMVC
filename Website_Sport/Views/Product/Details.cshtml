@model Website_Sport.Models.Product
@using Microsoft.AspNetCore.Http
@using Microsoft.EntityFrameworkCore
@{
    ViewData["Title"] = "Product-Detail";
    Layout = "~/Views/Shared/MasterLayout.cshtml";
    ShopTheThaoContext context = new ShopTheThaoContext();
    var idString = ViewContext.RouteData.Values["id"]?.ToString();
    // int id;
    int id = 0; // Gán giá trị mặc định cho biến id
    if (!string.IsNullOrEmpty(idString))
    {
        int.TryParse(idString, out id); // Chuyển đổi idString sang kiểu int và gán cho biến id
    }
    var httpContextAccessor = Context.RequestServices.GetService(typeof(Microsoft.AspNetCore.Http.IHttpContextAccessor)) as Microsoft.AspNetCore.Http.IHttpContextAccessor;
    var isLoggedIn = httpContextAccessor.HttpContext.Session.GetString("Email") != null;
    var checkQuantity = Model.Quantity;
    var RelateProducts = context.Products.Include(p => p.Images).Include(p => p.Category).Where(p => p.Category.CategoryName == Model.Category.CategoryName).GroupBy(p => p.Type)
                                          .Select(g => g.First())
                                          .ToList(); 
    var userEmail = httpContextAccessor.HttpContext.Session.GetString("Email");
    var user = context.Users.FirstOrDefault(u => u.Email == userEmail);
    var displayComment = context.Feedbacks.Include(p => p.Product).Include(p => p.User).Where(p => p.ProductId == id);
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Your Title</title>
    <link rel="stylesheet" href="../MasterLayout/style.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap"
          rel="stylesheet">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

    <style>
        .header {
            background: initial !important; 
        }

        .container-form {
            max-width: 1000px;
            margin: 0 auto;
        }
        /* Comment input */
        .comment-input {
            display: flex;
            margin-bottom: 8px;
            /* width: 300px; */
            margin-left: 262px;
        }

        #comment-text {
            flex: 1;
            padding: 4px;
            border: 1px solid #ccc;
            border-radius: 5px;
            outline: none;
        }

        #add-comment {
            padding: 10px 20px;
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-left: 6px;
        }

        /* Comments form */
        .comments-form {
            border: 1px solid #ccc;
            padding: 15px;
            margin-bottom: 20px;
            border-radius: 5px;
        }

        /* Comments */
        .comments {
            list-style: none;
            padding: 0;
        }

        .comment {
            /* border: 1px solid #ccc; */
            padding: 8px;
            margin-bottom: 10px;
            border-radius: 5px;
        }

        .comment-header {
            display: flex;
            align-items: center;
            margin-bottom: 5px;
        }

        .comment-author {
            font-weight: bold;
        }

        .comment-time {
            margin-left: auto;
            color: #999;
        }

        .comment-content {
            margin-bottom: 0;
        }

    </style>
</head>
<body>
    <div class="small-container single-product">
        <div class="row">
            <div class="col-2">
                <img src="http://localhost:5177/api/product@(Model.Images.First().Image1)" width="100%" id="productImg">

                <div class="small-img-row">
                    @{
                        if (int.TryParse(idString, out id))
                        {
                            var productId = id;
                            var images = context.Images.Where(i => i.ProductId == productId)
                            .OrderByDescending(i => i.ImageId)
                            .Take(4)
                            .ToList();
                            if (images != null && images.Any())
                            {
                                foreach (var image in images)
                                {
                                   <div class="small-img-rol">
                                   <img src="http://localhost:5177/api/product@(image.Image1)" alt="Product Image" width="100%" class="small-img" />
                                    </div>
                                }
                            }
                            else
                            {
                                 <p>No images available</p>
                            }
                        }
                    }
                </div>
            </div>
            <div class="col-2">
                <p>Home / T-Shirt</p>
                <h1>@Model.Type</h1>
                <h4>@Model.Price ₫</h4>
                @{
                    var products = context.Products.Where(p => p.Type == Model.Type).ToList();
                    var selectedColor = "";

                }
                    <select id="colorSelect">
                        <option>Chọn màu</option>
                        @foreach (var color in products.Select(p => p.Color).Distinct())
                        {
                                <option value="@color">@color</option>
                        }
                    </select>
                <select id="sizeSelect">
                    <option>Select Size</option>
                </select>
                <script>
                    document.addEventListener('DOMContentLoaded', function () {
                       
                        colorSelect.addEventListener('change', function () { // Sự kiện 'change' khi chọn một tùy chọn từ select
                            const color = this.value; // Lấy giá trị mà người dùng đã chọn từ select
                            // Lấy giá trị Type từ Razor
                            console.log(color);
                            const type = "@Model.Type"; // Lấy giá trị Type từ Razor
                                    const typeElement = document.createElement('div');
                                    typeElement.innerHTML = type;
                                    const decodedType = typeElement.textContent;
                            console.log(decodedType);
                            const url = `http://localhost:5177/api/get-product?color=${color}&type=${decodedType}`;

                            fetch(url)
                                .then(response => {
                                    if (!response.ok) {
                                        throw new Error('Network response was not ok');
                                    }
                                    return response.json();
                                })
                            fetch(url)
                                .then(response => {
                                    if (!response.ok) {
                                        throw new Error('Network response was not ok');
                                    }
                                    return response.json();
                                    
                                })
                                .then(data => {
                                    const sizeSelect = document.getElementById('sizeSelect');
                                        sizeSelect.innerHTML = ''; // Xóa nội dung cũ
                                        // Thêm tùy chọn "Select Size" vào đầu tiên
                                        const defaultOption = document.createElement('option');
                                        defaultOption.text = 'Select Size';
                                        defaultOption.disabled = true;
                                        defaultOption.selected = true;
                                        sizeSelect.appendChild(defaultOption);
                                        // Thêm các tùy chọn từ trường 'size' của mỗi object vào thẻ select
                                        data.forEach(product => {
                                            const option = document.createElement('option');
                                            option.text = product.size;
                                            sizeSelect.appendChild(option);
                                        });
                                        sizeSelect.addEventListener('change', function () {
                                            const selectedSize = this.value; // Lấy giá trị của tùy chọn đã chọn
                                            // Sử dụng giá trị đã chọn ở đây, ví dụ:
                                        });
                                })
                                .catch(error => {
                                    console.error('There was an error with the fetch operation:', error);
                                });

                        });
                    });
                </script>
                    <input id="quantity-btn" type="number" value="1">

                @if (checkQuantity != 0)
                {
                    <button class="btn" id="add-to-cart-btn" style="border: none">Add To Cart</button>
                }
                else
                {
                    <span class="btn disabled">Hết hàng</span>
                }
                    <h3>
                        Description
                        <i class="fa fa-indent"></i>
                    </h3>
                    <br>
                    <p>
                        @Model.Description
                    </p>
            </div>
        </div>
    </div>
    <script>
        document.getElementById('add-to-cart-btn').addEventListener('click', function () {
            const sizeSelect = document.getElementById('sizeSelect');
            const selectedSize = sizeSelect.value; // Lấy giá trị của tùy chọn đã chọn
            const colorSelected = document.getElementById('colorSelect')
            const selectedColor = colorSelected.value;
            const type = "@Model.Type"; // Lấy giá trị Type từ Razor
            const typeElement = document.createElement('div');
            typeElement.innerHTML = type;
            const decodedType = typeElement.textContent;
            const price = "@Model.Price";
            const priceElement = document.createElement('div');
            priceElement.innerHTML = price;
            const decodedPrice = priceElement.textContent;

            const quantityBtn = document.getElementById('quantity-btn');
            const btnQuantity = quantityBtn.value;
            const image = "http://localhost:5177/api/product@(Model.Images.First().Image1)";
            const product = {
                Type: decodedType,
                Price: decodedPrice,
                Size: selectedSize,
                Color: selectedColor,
                Image: image,
                Quantity: parseInt(btnQuantity),
            };
            addToCart(product);
        });

        function addToCart(product) {
            let cartItems = JSON.parse(localStorage.getItem('cart')) || [];

            const existingProductIndex = cartItems.findIndex(item =>
                item.Type === product.Type &&
                item.Price === product.Price &&
                item.Size === product.Size &&
                item.Color === product.Color
            );
            console.log(product.Quantity);
            if (existingProductIndex !== -1) {
                cartItems[existingProductIndex].Quantity += parseInt(product.Quantity);
            } else {
                cartItems.push(product);
            }
            alert("Thêm thành công vào giỏ hàng!");
            location.reload();
            localStorage.setItem('cart', JSON.stringify(cartItems));
        }
    </script>
    <!--FeedBack-->
     @if (isLoggedIn)
     {
    <div class="comment-input">
        <form asp-controller="Product" asp-action="FeedBack" method="post" style="display: flex">
                <textarea id="comment-text" name="content" style="width: 600px;"
                      placeholder="Enter your comment..."></textarea>
                      <input type="text" name="productId" value="@id" hidden/>
                <button id="add-comment" type="submit">Bình luận</button>
        </form>
    </div>
    } else {
    <p style="color: red; margin-left: 262px">Đăng nhập để sử dụng comment!</p>
    }
    <div class="container-form">
        <form class="comments-form">
            <div class="comments">
              @if (displayComment.Any())
    {
        @foreach (var item in displayComment)
        {
            if (item != null)
            {
                <div class="comment">
                    <div class="comment-header">
                        <span class="comment-author">@item.User.UserName</span>
                        <span class="comment-time">@item.CreatedAt</span>
                    </div>
                    <p class="comment-content">@item.Content</p>
                                @if (user != null)
                                {
                                    if (user.UserId == @item.User.UserId)
                                    {
                                        <a style="color: red; cursor: pointer" href="/xoa-feedback/@item.FeedbackId">Xóa</a>
                                    }
                                 }
                    </div>
            }
        }
    }
    else
    {
        <h4 style="color: red; text-align: center">Không có bình luận !</h4>
    }
            </div>
        </form>
    </div>
    <script>
        var addButton = document.getElementById("add-comment");

        // Thêm sự kiện "click" cho button
        addButton.addEventListener("click", function () {
            // Reload lại trang khi click vào button
            location.reload();
        });
    </script>
    <!-- ----- title------------- -->
    <div class="small-container">
        <div class="" style="margin-top: 40px; margin-left: 16px">
            <h2 style="">Relate Products</h2>
            <p>View More</p>
        </div>
    </div>

    <!-- ---------------Products----------------- -->
    <div class="small-container">

        <div class="row">
            @foreach(var relate in RelateProducts)
            {
                <div class="col-4">
                    <a href="/product-detail/@relate.ProductId"><img src="http://localhost:5177/api/product@(relate.Images.First().Image1)"></a>
                    <a href="/product-detail/@relate.ProductId"><h4>@relate.Type</h4></a>
                    <div class="rating">
                        <i class="fa fa-star"></i>
                        <i class="fa fa-star"></i>
                        <i class="fa fa-star"></i>
                        <i class="fa fa-star"></i>
                        <i class="fa fa-star-o"></i>
                    </div>
                    <p>@relate.Price</p>
                </div>
            }
    </div>
    <!-- ------------------- js for toggle menu-------------- -->
    <script>
        var MenuItems = document.getElementById("MenuItems");

        MenuItems.style.maxHeight = "0px";

        function menutoggle() {
            if (MenuItems.style.maxHeight == "0px") {
                MenuItems.style.maxHeight = "200px";
            }
            else {
                MenuItems.style.maxHeight = "0px";
            }
        }

    </script>

    <!-- ------------------- JS for  product gallery------------------------         -->
    <script>
        var ProductImg = document.getElementById("productImg");
        var SmallImg = document.getElementsByClassName("small-img");

        SmallImg[0].onclick = function () {
            ProductImg.src = SmallImg[0].src;
        }
        SmallImg[1].onclick = function () {
            ProductImg.src = SmallImg[1].src;
        }
        SmallImg[2].onclick = function () {
            ProductImg.src = SmallImg[2].src;
        }
        SmallImg[3].onclick = function () {
            ProductImg.src = SmallImg[3].src;
        }
    </script>
</body>
</html>




